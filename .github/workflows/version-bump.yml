name: Version Bump

# Trigger the workflow when a tag is pushed
on:
  push:
    tags:
      - 'v*' # This will match tags like v1.0.0, v2.3.1, etc.

  # For testing purposes, you can also manually trigger this workflow
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to set (without v prefix)'
        required: true
        default: '1.0.0'

jobs:
  update-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper branch creation

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
<<<<<<< Updated upstream
          cache: 'yarn'
=======
>>>>>>> Stashed changes

      # Extract version from tag or input
      - name: Extract version
        id: extract_version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            TAG=${GITHUB_REF#refs/tags/}
            VERSION=${TAG#v}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "BRANCH_NAME=bump-version-to-$VERSION" >> $GITHUB_ENV
          echo "Extracted version: $VERSION"

      # Create a new branch
      - name: Create branch
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git checkout -b ${{ env.BRANCH_NAME }}

      # Update version in package.json directly with Node.js
      - name: Update version in package.json
        run: |
<<<<<<< Updated upstream
          # Install dependencies first
          yarn install --frozen-lockfile
          
          # Use Yarn to update the version field in package.json
          yarn version --new-version ${{ env.VERSION }} --no-git-tag-version
          echo "Updated package.json version to ${{ env.VERSION }}"
=======
          # Use Node.js to directly update the version in package.json
          node -e "
            const fs = require('fs');
            const path = require('path');
            const packageJsonPath = path.resolve('./package.json');
            
            // Read the package.json file
            const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
            
            // Update the version
            packageJson.version = '${{ env.VERSION }}';
            
            // Write the updated package.json back to disk
            fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2) + '\n');
            
            console.log('Updated package.json version to ${{ env.VERSION }}');
          "
          
          # Verify the update
          cat package.json
>>>>>>> Stashed changes

      # Commit changes
      - name: Commit changes
        run: |
          git add package.json
          git commit -m "chore: bump version to ${{ env.VERSION }}"
          git push origin ${{ env.BRANCH_NAME }}

      # Create Pull Request
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: bump version to ${{ env.VERSION }}"
          title: "chore: bump version to ${{ env.VERSION }}"
          body: |
            This PR updates the version in package.json to ${{ env.VERSION }} based on the newly created tag.
            
            This is an automated PR created by the version bump workflow.
          branch: ${{ env.BRANCH_NAME }}
          base: master
          delete-branch: false
